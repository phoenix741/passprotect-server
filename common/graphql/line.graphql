# Wallet line content encrypted
type EncryptedWalletLine {
  # Salt used to encrypt wallet line
  salt: String!
  # Information of the wallet encrypted
  informations: EncryptedContent!
}

# Wallet line content encrypted
input EncryptedWalletLineInput {
  # Salt used to encrypt wallet line
  salt: String!
  # Information of the wallet encrypted
  informations: EncryptedContentInput!
}

# Wallet
type WalletLine {
  # Id of the line
  _id: ID!
  # Type of the line (text, password, card)
  type: String!,
  # Label of the wallet line
  label: String!,
  # Group of the wallet line
	group: String,
  # Encrypted content of the line (encrypted client side)
  encryption: EncryptedWalletLine!,
  # Owner of the list
  user: User!,
  # Last updated date of the line
  updatedAt: Date,
  # Revision (modification count) of the line
  _rev: Int
}

# Wallet line used as input
input WalletLineInput {
  # Id of the line, if not filled application create a new line
  _id: ID
  # Type of the line (text, password, card)
  type: String!,
  # Label of the wallet line
  label: String!,
  # Group of the wallet line
	group: String,
  # Encrypted content of the line (encrypted client side)
  encryption: EncryptedWalletLineInput!,
  # Revision (modification count) of the line, used to ensure modification of the last line
  _rev: Int
}

extend type RootQuery {
  # Request the list of lines from the connected users.
  lines: [WalletLine],

  # Request a wallet line
  line(id: ID!): WalletLine,

	# Request all groups available on lines
	groups: [String!]
}

union CreateUpdateLineResult = WalletLine | Errors

extend type RootMutation {
  createUpdateLine(input: WalletLineInput!): CreateUpdateLineResult
  removeLine(id: ID): Errors
}
