# Master key encrypted for the user
type EncryptedMasterKey {
  # Salt added to encrypt the master key
  salt: String!
  # Encrypted master key
  encryptedKey: EncryptedContent!
}

# Master key encrypted for the user
input EncryptedMasterKeyInput {
  # Salt added to encrypt the master key
  salt: String!
  # Encrypted master key
  encryptedKey: EncryptedContentInput!
}

# User defined in the application
type User {
  # Login of the user
  _id: ID!,
  # Encrypted master key
  encryption: EncryptedMasterKey!,
  # Creation date of the user
  creationAt: Date,
  # Role of the user (can be user or admin)
  role: String
  # Wallet lines of the user.
  lines: [WalletLine]!
}

input RegistrationUser {
  # Login of the user
  _id: ID!,
  # Password used for registration
  password: String!
  # Encrypted master key
  encryption: EncryptedMasterKeyInput!,
}

type RootQuery {
  # Request the list of users from the database.
  users: [User],

  # Request a user
  user(id: ID!): User,
}

union RegisterUserResult = User | Errors

type RootMutation {
  registerUser(input: RegistrationUser!): RegisterUserResult
}
